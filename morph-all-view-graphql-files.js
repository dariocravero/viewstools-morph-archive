import { promises as fs } from 'fs'
import gql from 'graphql-tag'
import path from 'path'

export default function morphAllViews({ appName, filesViewGraphql, src }) {
  return [...filesViewGraphql].map((file) => ({
    file: `${file}.js`,
    content: maybeMorph({
      appName,
      file,
      src,
      viewPath: path.relative(src, path.dirname(file)),
    }),
  }))
}

async function maybeMorph({ appName, file, src, viewPath }) {
  let content = await fs.readFile(file, 'utf8')

  let operationName = `${appName}__${viewPath}`.replace(/[^A-Za-z0-9_]/g, '_')
  let [, type, start] =
    content.match(/(query|subscription|mutation).+?([({])/) || []
  let typeNameRegex = new RegExp(`${type}.+?[({]`)

  content = content.replace(typeNameRegex, `${type} ${operationName}${start}`)

  try {
    // eslint-disable-next-line
    gql`
      ${content}
    `

    return `// this is an autogenerated file from ${path.relative(src, file)}
import { gql } from 'Data/Api.js'

export default gql\`
${content}
\``
  } catch (error) {
    console.error(`Failed to morph GraphQL file ${file}. Content:\n${content}`)
    console.error(error)

    return `// this is an autogenerated file from ${path.relative(src, file)}

export default null`
  }
}
